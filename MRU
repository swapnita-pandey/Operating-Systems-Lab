#include <stdio.h>
int findMRU(int time[], int n)
{
    int i, max = time[0], pos = 0;
    for(i = 1; i < n; i++)
    {
        if(time[i] > max)
        {
            max = time[i];
            pos = i;
        }
    }
    return pos;
}
void lru(int n, int pages[], int frames) //n - no. of pages
{
    int pf = 0;
    int flag1, flag2, c = 0, pos = -1;
    int frame[frames], freq[n];

    for(int i = 0; i < frames; i++)
    {
        frame[i] = -1;
    }

    for(int i = 0; i < n; i++)
    {
        flag1 = flag2 = 0;
        for(int j = 0; j < frames; j++)
        {
            if(frame[j] == pages[i])
            {
                c++;
                freq[j] = c;
                flag1 = flag2 = 1;
                break;
            }
        }
        if(flag1 == 0)
        {
            for(int j = 0; j < frames; j++)
            {
                if(frame[j] == -1)
                {
                    c++;
                    pf++;
                    frame[j] = pages[i];
                    freq[j] = c;
                    flag2 = 1;
                    break;
                }
            }
        }
        if(flag2 == 0)
        {
            pos = findMRU(freq, frames);
            c++;
            pf++;
            frame[pos] = pages[i];
            freq[pos] = c;
        }
        printf("\n");
        for(int j = 0; j < frames; j++)
        {
            printf("%d\t", frame[j]);
        }
    }
    printf("\nTotal page faults: %d\n", pf);
}
int main()
{
    int c, n;
    printf("Enter frame capacity: ");
    scanf("%d", &c);
    printf("Enter the number of pages: ");
    scanf("%d", &n);
    int a[n];
    printf("Enter the values: ");
    for(int i = 0; i < n; i++)
    {
        scanf("%d", &a[i]);
    }
    lru(n, a, c);
}
